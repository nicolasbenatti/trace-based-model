# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBInstruction

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Instruction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Instruction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstruction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Instruction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Instruction
    def Addr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Instruction
    def Opcode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Instruction
    def Mnemonic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Instruction
    def Operands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Instruction
    def OperandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Instruction
    def OperandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Instruction
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Instruction
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Instruction
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Instruction
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Instruction
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Instruction
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Instruction
    def IsNop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Instruction
    def IsBranch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Instruction
    def BranchTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Instruction
    def IsFlush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Instruction
    def IsVctrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Instruction
    def Loads(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Instruction
    def LoadsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # Instruction
    def LoadsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Instruction
    def LoadsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Instruction
    def Stores(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Instruction
    def StoresAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # Instruction
    def StoresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Instruction
    def StoresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Instruction
    def Lmul(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Instruction
    def Sew(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Instruction
    def Vl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def InstructionStart(builder):
    builder.StartObject(16)

def Start(builder):
    InstructionStart(builder)

def InstructionAddAddr(builder, addr):
    builder.PrependUint64Slot(0, addr, 0)

def AddAddr(builder, addr):
    InstructionAddAddr(builder, addr)

def InstructionAddOpcode(builder, opcode):
    builder.PrependUint32Slot(1, opcode, 0)

def AddOpcode(builder, opcode):
    InstructionAddOpcode(builder, opcode)

def InstructionAddMnemonic(builder, mnemonic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mnemonic), 0)

def AddMnemonic(builder, mnemonic):
    InstructionAddMnemonic(builder, mnemonic)

def InstructionAddOperands(builder, operands):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(operands), 0)

def AddOperands(builder, operands):
    InstructionAddOperands(builder, operands)

def InstructionStartOperandsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOperandsVector(builder, numElems: int) -> int:
    return InstructionStartOperandsVector(builder, numElems)

def InstructionAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    InstructionAddInputs(builder, inputs)

def InstructionStartInputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputsVector(builder, numElems: int) -> int:
    return InstructionStartInputsVector(builder, numElems)

def InstructionAddOutputs(builder, outputs):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)

def AddOutputs(builder, outputs):
    InstructionAddOutputs(builder, outputs)

def InstructionStartOutputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutputsVector(builder, numElems: int) -> int:
    return InstructionStartOutputsVector(builder, numElems)

def InstructionAddIsNop(builder, isNop):
    builder.PrependBoolSlot(6, isNop, 0)

def AddIsNop(builder, isNop):
    InstructionAddIsNop(builder, isNop)

def InstructionAddIsBranch(builder, isBranch):
    builder.PrependBoolSlot(7, isBranch, 0)

def AddIsBranch(builder, isBranch):
    InstructionAddIsBranch(builder, isBranch)

def InstructionAddBranchTarget(builder, branchTarget):
    builder.PrependUint64Slot(8, branchTarget, 0)

def AddBranchTarget(builder, branchTarget):
    InstructionAddBranchTarget(builder, branchTarget)

def InstructionAddIsFlush(builder, isFlush):
    builder.PrependBoolSlot(9, isFlush, 0)

def AddIsFlush(builder, isFlush):
    InstructionAddIsFlush(builder, isFlush)

def InstructionAddIsVctrl(builder, isVctrl):
    builder.PrependBoolSlot(10, isVctrl, 0)

def AddIsVctrl(builder, isVctrl):
    InstructionAddIsVctrl(builder, isVctrl)

def InstructionAddLoads(builder, loads):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(loads), 0)

def AddLoads(builder, loads):
    InstructionAddLoads(builder, loads)

def InstructionStartLoadsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartLoadsVector(builder, numElems: int) -> int:
    return InstructionStartLoadsVector(builder, numElems)

def InstructionAddStores(builder, stores):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(stores), 0)

def AddStores(builder, stores):
    InstructionAddStores(builder, stores)

def InstructionStartStoresVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartStoresVector(builder, numElems: int) -> int:
    return InstructionStartStoresVector(builder, numElems)

def InstructionAddLmul(builder, lmul):
    builder.PrependFloat32Slot(13, lmul, 0.0)

def AddLmul(builder, lmul):
    InstructionAddLmul(builder, lmul)

def InstructionAddSew(builder, sew):
    builder.PrependUint8Slot(14, sew, 0)

def AddSew(builder, sew):
    InstructionAddSew(builder, sew)

def InstructionAddVl(builder, vl):
    builder.PrependInt16Slot(15, vl, 0)

def AddVl(builder, vl):
    InstructionAddVl(builder, vl)

def InstructionEnd(builder):
    return builder.EndObject()

def End(builder):
    return InstructionEnd(builder)
